{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Hands","props","useState","className","class","data-interval","src","pic","onClick","playTheGameOnParentLevel","shortName","id","name","short","picture","items","playerScore","setPlayerScore","computerScore","setComputerScore","computerPic","setComputerPic","computerChoice","setComputerChoice","playTheGame","playerChoice","computerHand","Math","floor","random","player","computer","won","Fragment","data-ride","map","x","href","role","data-slide","aria-hidden","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"6MAKMA,EAAQ,SAACC,GAAW,IAAD,EAEiBC,mBAAS,GAF1B,6BAOvB,OAEE,qBAAKC,UAAWF,EAAMG,MAAOC,iBAAe,EAA5C,SACE,qBAAKC,IAAKL,EAAMM,IAAKC,QANR,WACfP,EAAMQ,yBAAyBR,EAAMS,iBAU1B,aAAO,IAAD,EAEOR,mBAAS,CACjC,CAAES,GAAI,EAAGC,KAAM,OAAQC,MAAO,IAAKP,IAAK,mCAAoCF,MAAO,uBAAwBU,QAAS,YACpH,CAAEH,GAAI,EAAGC,KAAM,QAASC,MAAO,IAAKP,IAAK,oCAAqCF,MAAO,gBAAiBU,QAAS,aAC/G,CAAEH,GAAI,EAAGC,KAAM,WAAYC,MAAO,IAAKP,IAAK,uCAAwCF,MAAO,gBAAiBU,QAAS,kBALpG,mBAEZC,EAFY,aAQmBb,mBAAS,IAR5B,mBAQZc,EARY,KAQCC,EARD,OASuBf,mBAAS,GAThC,mBASZgB,EATY,KASGC,EATH,OAUmBjB,mBAAS,oCAV5B,mBAUZkB,EAVY,KAUCC,EAVD,OAWyBnB,qBAXzB,mBAWZoB,EAXY,KAWIC,EAXJ,KAmBbC,EAAc,SAACC,GACnB,IAAIC,EAAeX,EAAMY,KAAKC,MAAsB,EAAhBD,KAAKE,WACzCN,EAAkBG,EAAab,OAC/B,IAVciB,EAAQC,EAUlBC,GAVUF,EAUGL,MAVKM,EAUST,GARtB,QACM,MAAXQ,GAA+B,MAAbC,GAA+B,MAAXD,GAA+B,MAAbC,GAA+B,MAAXD,GAA+B,MAAbC,EACzF,SACF,WAMK,WAARC,GACFf,EAAeD,EAAc,GACnB,aAARgB,GACFb,EAAiBD,EAAgB,GAEnCG,EAAeK,EAAapB,MAO9B,OACE,eAAC,IAAM2B,SAAP,WACE,sBAAK9B,UAAU,YAAf,UACE,sBAAKA,UAAU,cAAf,cAA8B,wBAAQQ,GAAG,OAAOH,QAPxC,WACZS,EAAe,GACfE,EAAiB,IAKmDhB,UAAU,eAA5C,2BAC9B,sBAAKQ,GAAG,aAAR,UAEE,sBAAKR,UAAU,SAASQ,GAAG,cAA3B,oBAAiDK,KACjD,sBAAKb,UAAU,SAASQ,GAAG,gBAA3B,sBAAqDO,WAIzD,sBAAKf,UAAU,aAAf,UACE,sBAAKA,UAAU,UAAf,UACE,mDACA,sBAAKQ,GAAG,0BAA0BR,UAAU,iBAAiB+B,YAAU,WAAvE,UACE,qBAAK/B,UAAU,iBAAf,SACGY,EAAMoB,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAO3B,yBAA0Be,EAAaZ,KAAMwB,EAAExB,KAAMF,UAAW0B,EAAEvB,MAAON,IAAK6B,EAAE9B,IAAKF,MAAOgC,EAAEhC,aAEvH,oBAAGD,UAAU,wBAAwBkC,KAAK,2BAA2BC,KAAK,SAASC,aAAW,OAA9F,UACE,sBAAMpC,UAAU,6BAA6BqC,cAAY,SACzD,sBAAMrC,UAAU,UAAhB,yBAEF,oBAAGA,UAAU,wBAAwBkC,KAAK,2BAA2BC,KAAK,SAASC,aAAW,OAA9F,UACE,sBAAMpC,UAAU,6BAA6BqC,cAAY,SACzD,sBAAMrC,UAAU,UAAhB,2BAGN,uBACA,8BAAK,qBAAKG,IAAKc,aCvERqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.7abdc0a6.chunk.js","sourcesContent":["\nimport React, { useState } from 'react'\nimport { createPortal } from 'react-dom'\n\n\nconst Hands = (props) => {\n\n  const [currentValue, setCurrentValue] = useState(0)\n\n  const playGame = () => {\n    props.playTheGameOnParentLevel(props.shortName)\n  }\n  return (\n\n    <div className={props.class} data-interval={false}>\n      <img src={props.pic} onClick={playGame} />\n    </div>\n  )\n}\n\nexport default () => {\n\n  const [items, setItems] = useState([\n    { id: 1, name: \"rock\", short: \"r\", src: \"http://www.pontusweb.se/rock.png\", class: \"carousel-item active\", picture: \"rock.png\" },\n    { id: 2, name: \"paper\", short: \"p\", src: \"http://www.pontusweb.se/paper.png\", class: \"carousel-item\", picture: \"paper.png\" },\n    { id: 3, name: \"scissors\", short: \"s\", src: \"http://www.pontusweb.se/scissors.png\", class: \"carousel-item\", picture: \"scissors.png\" }\n\n  ])\n  const [playerScore, setPlayerScore] = useState(0)\n  const [computerScore, setComputerScore] = useState(0)\n  const [computerPic, setComputerPic] = useState(\"https://pontusweb.se/unnamed.png\");\n  const [computerChoice, setComputerChoice] = useState()\n  const whoWon = (player, computer) => {\n    if (player === computer)\n      return \"Draw!\"\n    if (player === \"r\" && computer === \"s\" || player === \"s\" && computer === \"p\" || player === \"p\" && computer === \"r\")\n      return \"Player\"\n    return \"Computer\"\n  }\n  const playTheGame = (playerChoice) => {\n    let computerHand = items[Math.floor(Math.random() * 3)]\n    setComputerChoice(computerHand.short)\n    let won = whoWon(playerChoice, computerChoice)\n    if (won === \"Player\")\n      setPlayerScore(playerScore + 1)\n    if (won === \"Computer\")\n      setComputerScore(computerScore + 1)\n\n    setComputerPic(computerHand.src)\n  }\n\n  const reset = () => {\n    setPlayerScore(0)\n    setComputerScore(0)\n  }\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"buttonreset\"> <button id=\"rest\" onClick={reset} className=\"btn btn-dark\">Reset game</button></div>\n        <div id=\"scoreboard\">\n\n          <div className=\"column\" id=\"playerscore\">Player:{playerScore}</div>\n          <div className=\"column\" id=\"computerscore\">Computer:{computerScore}</div>\n\n        </div>\n      </div>\n      <div className=\"container2\">\n        <div className=\"choices\">\n          <h4>Choose your hand!</h4>\n          <div id=\"carouselExampleInterval\" className=\"carousel slide\" data-ride=\"carousel\">\n            <div className=\"carousel-inner\">\n              {items.map(x => <Hands playTheGameOnParentLevel={playTheGame} name={x.name} shortName={x.short} pic={x.src} class={x.class} />)}\n            </div>\n            <a className=\"carousel-control-prev\" href=\"#carouselExampleInterval\" role=\"button\" data-slide=\"prev\">\n              <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n              <span className=\"sr-only\">Previous</span>\n            </a>\n            <a className=\"carousel-control-next\" href=\"#carouselExampleInterval\" role=\"button\" data-slide=\"next\">\n              <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n              <span className=\"sr-only\">Next</span>\n            </a>\n          </div></div>\n        <hr />\n        <div><img src={computerPic} /></div>\n      </div>\n    </React.Fragment>\n  )\n\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}